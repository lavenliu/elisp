#+TITLE: Open vSwitch
#+AUTHOR: LavenLiu
#+DATE: 2010-08-20
#+EMAIL: ldczz2008@163.com 

#+STARTUP: OVERVIEW
#+TAGS: OFFICE(o) HOME(h) PROJECT(p) CHANGE(c) REPORT(r) MYSELF(m) 
#+TAGS: PROBLEM(P) INTERRUPTTED(i) RESEARCH(R)
#+SEQ_TODO: TODO(t)  STARTED(s) WAITING(W) | DONE(d) CANCELLED(C) DEFERRED(f)
#+COLUMNS: %40ITEM(Details) %TAGS(Context) %7TODO(To Do) %5Effort(Time){:} %6CLOCKSUM{Total}

#+LaTeX_CLASS: book
#+LaTeX_CLASS_OPTIONS: [a4paper,11pt]
#+LaTeX_HEADER: \usepackage[top=2.1cm,bottom=2.1cm,left=2.1cm,right=2.1cm]{geometry}
#+LaTeX_HEADER: \setmainfont[Mapping=tex-text]{Times New Roman}
#+LaTeX_HEADER: \setsansfont[Mapping=tex-text]{Tahoma}
#+LaTeX_HEADER: \setmonofont{Courier New}
#+LaTeX_HEADER: \setCJKmainfont[BoldFont={Adobe Heiti Std},ItalicFont={Adobe Kaiti Std}]{Adobe Song Std}
#+LaTeX_HEADER: \setCJKsansfont{Adobe Heiti Std}
#+LaTeX_HEADER: \setCJKmonofont{Adobe Fangsong Std}
#+LaTeX_HEADER: \punctstyle{hangmobanjiao}
#+LaTeX_HEADER: \usepackage{color,graphicx}
#+LaTeX_HEADER: \usepackage[table]{xcolor}
#+LaTeX_HEADER: \usepackage{colortbl}
#+LaTeX_HEADER: \usepackage{listings}
#+LaTeX_HEADER: \usepackage[bf,small,indentafter,pagestyles]{titlesec}

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/style2.css" />

#+OPTIONS: ^:nil
#+OPTIONS: tex:t

* Open vSwitch简介
  Open vSwitch是一个由软件实现的虚拟交换机，由Nicira Networks主导开发。
  它的目的是通过编程扩展以让大型网络的管理变得自动化，同时仍然支持标准
  的网络接口和协议（例如NetFlow、sFlow、SPAN、RSPAN、CLI、LACP、
  802.1ag）。此外，Open vSwitch还可以跨物理服务器，实现类似于VMware的
  vNetwork分布式vSwitch或Cisco Nexus 1000V的功能。

  KVM虚拟机可以通过Open vSwitch接入网络。相比传统的桥接方式，Open
  vSwitch具有更高的灵活性，例如可以在线更改虚拟机的VLAN等。在使用Open
  vSwitch管理虚拟机网络之前，先了解一些Open vSwitch的基本概念。
* Open vSwitch的基本概念
** Bridge
   Bridge代表一个以太网交换机（Switch），一个主机中可以创建一个或多个
   Bridge设备。
** Port
   端口相当于物理交换机的端口，每个Port都隶属于一个Bridge。
** Interface
   连接到Port的网络接口设备。在通常情况下，Port和Interface是一对一的关
   系，只有在配置Port为bond模式后，Port和Interface才是一对多的关系。
** Controller
   OpenFlow控制器。OVS可以同时接受一个或者多个OpenFlow控制器的管理。
** datapath
   在OVS中，datapath负责执行数据交换，也就是把从接收端口收到的数据包在
   流表中进行匹配，并执行匹配到的动作。
** Flow table
   每个datapath都和一个Flow table关联，当datapath接收到数据之后，OVS会
   在Flow table中查找可以匹配的Flow，执行对应的操作，例如转发数据到另
   外的端口。
* Open vSwitch组成
  1. ovs-vswitched
  2. ovsdb-server
  3. ovs-dpctl
  4. ovs-vsctl
  5. ovs-appctl
  6. ovsdbmonitor
  7. ovs-controller
  8. ovs-ofctl
* Open vSwitch安装
** 测试环境
   测试环境为CentOS6U5 64位操作系统，iptables及selinux均关闭。
   | 主机名               |         IP地址 | 备注 |
   |----------------------+----------------+------|
   | rsync01.lavenliu.com | 192.168.20.160 |      |
** 安装依赖包
   #+BEGIN_SRC sh
yum install -y gcc make python-devel openssl-devel kernel-devel graphviz \
       kernel-debug-devel autoconf automake rpm-build redhat-rpm-config \
       libtool
   #+END_SRC
** 通过源码的方式安装
   从官方的Github下载源码包，这里使用的是2.4.2分支的源码，
   #+BEGIN_SRC sh
git clone https://github.com/openvswitch/ovs.git
cd ovs
./boot.sh
./configure
make dist
[ -d /root/rpmbuild/SOURCE ] || mkdir -p /root/rpmbuild/SOURCE
cd /root/rpmbuild/SOURCE
cp /root/ovs/openvswitch-2.4.2.tar.gz .
   #+END_SRC

   #+BEGIN_SRC sh
tar -xf openvswitch-2.4.2.tar.gz
cd openvswitch-2.4.2
rpmbuild -bb --without check rhel/openvswitch.spec
rpmbuild -bb rhel/openvswitch-kmod-rhel6.spec
   #+END_SRC

   如果编译没有问题，会在/root/rpmbuild/RPMS/x86_64目录下产生相应的RPM
   包，
   #+BEGIN_SRC sh
[root@rsync01 x86_64]# ll
total 12736
-rw-r--r-- 1 root root 1662784 May 20 16:22 kmod-openvswitch-2.4.2-1.el6.x86_64.rpm
-rw-r--r-- 1 root root 2851348 May 20 16:21 openvswitch-2.4.2-1.x86_64.rpm
-rw-r--r-- 1 root root 8520288 May 20 16:21 openvswitch-debuginfo-2.4.2-1.x86_64.rpm
   #+END_SRC

   接下来进行安装，
   #+BEGIN_SRC sh
rpm -ivh kmod-openvswitch-2.4.2-1.el6.x86_64.rpm
rpm -ivh openvswitch-debuginfo-2.4.2-1.el6.x86_64.rpm
rpm -ivh openvswitch-2.4.2-1.x86_64.rpm
   #+END_SRC

   启动openvswitch服务，
   #+BEGIN_SRC sh
[root@rsync01 ~]# /etc/init.d/openvswitch start
/etc/openvswitch/conf.db does not exist ... (warning).
Creating empty database /etc/openvswitch/conf.db           [  OK  ]
Starting ovsdb-server                                      [  OK  ]
Configuring Open vSwitch system IDs                        [  OK  ]
Inserting openvswitch module                               [  OK  ]
Starting ovs-vswitchd                                      [  OK  ]
Enabling remote OVSDB managers                             [  OK  ]
   #+END_SRC

   查看进程是否启动成功，
   #+BEGIN_SRC sh
[root@rsync01 ~]# /etc/init.d/openvswitch status
ovsdb-server is running with pid 47089
ovs-vswitchd is running with pid 47100
[root@rsync01 ~]# ps -ef |grep openv |grep -v grep
root      47089  47088  0 16:31 ?        00:00:00 ovsdb-server /etc/openvswitch/conf.db -vconsole:emer -vsyslog:err \
-vfile:info --remote=punix:/var/run/openvswitch/db.sock \
--private-key=db:Open_vSwitch,SSL,private_key \
--certificate=db:Open_vSwitch,SSL,certificate \
--bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \
--no-chdir --log-file=/var/log/openvswitch/ovsdb-server.log \
--pidfile=/var/run/openvswitch/ovsdb-server.pid \
--detach --monitor
root      47100  47099  0 16:31 ?        00:00:00 ovs-vswitchd unix:/var/run/openvswitch/db.sock \
-vconsole:emer -vsyslog:err -vfile:info --mlockall --no-chdir \
--log-file=/var/log/openvswitch/ovs-vswitchd.log \
--pidfile=/var/run/openvswitch/ovs-vswitchd.pid \
--detach --monitor
   #+END_SRC

   查看OVS安装的版本信息，
   #+BEGIN_SRC sh
[root@rsync01 ~]# ovs-vsctl --version
ovs-vsctl (Open vSwitch) 2.4.2
Compiled May 20 2016 16:20:56
DB Schema 7.12.1
   #+END_SRC

   有了以上两个步骤的检查及输出，说明我们的Open vSwitch已经成功部署及
   启动成功了。接下来在此基础上可以做其他操作了。
** 通过YUM的方式安装
* OVS基本操作
   #+BEGIN_SRC sh
[root@rsync01 ~]# ovs-vsctl add-br br0
[root@rsync01 ~]# ovs-vsctl list-br
br0
[root@rsync01 ~]# ifconfig 
eth0      Link encap:Ethernet  HWaddr 00:0C:29:EA:F2:4E  
          inet addr:192.168.20.160  Bcast:192.168.20.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:feea:f24e/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:381 errors:0 dropped:0 overruns:0 frame:0
          TX packets:275 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:34824 (34.0 KiB)  TX bytes:33521 (32.7 KiB)

eth1      Link encap:Ethernet  HWaddr 00:0C:29:EA:F2:58  
          inet addr:192.168.19.134  Bcast:192.168.19.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:feea:f258/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:223 errors:0 dropped:0 overruns:0 frame:0
          TX packets:260 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:29558 (28.8 KiB)  TX bytes:21629 (21.1 KiB)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
   #+END_SRC

   我们使用ifconfig命令并没有看到我们增加的br0网络接口，接下来使用"ifconfig -a"命令进行查看，
   #+BEGIN_SRC sh
[root@rsync01 ~]# ifconfig -a
br0       Link encap:Ethernet  HWaddr 4A:AB:C9:D5:A7:40  
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)

eth0      Link encap:Ethernet  HWaddr 00:0C:29:EA:F2:4E  
          inet addr:192.168.20.160  Bcast:192.168.20.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:feea:f24e/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:394 errors:0 dropped:0 overruns:0 frame:0
          TX packets:288 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:36080 (35.2 KiB)  TX bytes:36149 (35.3 KiB)

eth1      Link encap:Ethernet  HWaddr 00:0C:29:EA:F2:58  
          inet addr:192.168.19.134  Bcast:192.168.19.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:feea:f258/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:228 errors:0 dropped:0 overruns:0 frame:0
          TX packets:268 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:30255 (29.5 KiB)  TX bytes:22258 (21.7 KiB)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)

ovs-system Link encap:Ethernet  HWaddr 52:6E:37:12:5A:FE  
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
   #+END_SRC

   使用ifconfig命令启动br0网络接口，
   #+BEGIN_SRC sh
[root@rsync01 ~]# ifconfig br0
br0       Link encap:Ethernet  HWaddr 4A:AB:C9:D5:A7:40  
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)

[root@rsync01 ~]# ifconfig br0 up
   #+END_SRC

   将br0网桥连接至一个指定的控制器，
   #+BEGIN_SRC sh
[root@rsync01 ~]# ovs-vsctl set-controller br0 tcp:192.168.20.160:6633
[root@rsync01 ~]# ovs-vsctl show
8154b069-80d5-4769-8228-92d2357a06a9
    Bridge "br0"
        Controller "tcp:192.168.20.160:6633"
        Port "br0"
            Interface "br0"
                type: internal
    ovs_version: "2.4.2"
   #+END_SRC
** 交换机基本操作
   1. 查看虚拟交换机的信息
	  #+BEGIN_SRC sh
[root@rsync01 ~]# ovs-ofctl show br0
OFPT_FEATURES_REPLY (xid=0x2): dpid:00004aabc9d5a740
n_tables:254, n_buffers:256
capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP
actions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst
 LOCAL(br0): addr:4a:ab:c9:d5:a7:40
     config:     0
     state:      0
     speed: 0 Mbps now, 0 Mbps max
OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0
	  #+END_SRC
   2. 查看br0上各交换机端口的状态
	  #+BEGIN_SRC sh
[root@rsync01 ~]# ovs-ofctl dump-ports br0
OFPST_PORT reply (xid=0x2): 1 ports
  port LOCAL: rx pkts=6, bytes=468, drop=0, errs=0, frame=0, over=0, crc=0
           tx pkts=0, bytes=0, drop=0, errs=0, coll=0
	  #+END_SRC
   3. 查看br0上所有的流规则
	  #+BEGIN_SRC sh
[root@rsync01 ~]# ovs-ofctl dump-flows br0
NXST_FLOW reply (xid=0x4):
	  #+END_SRC
** 网桥管理
   之前已经添加了一个名为br0的网桥，现在我们可以把网络接口eth0附加到br0网桥上。
   #+BEGIN_SRC sh
ovs-vsctl add-port br0 eth0
   #+END_SRC

   列出附加到br0网桥上的所有网络接口，
   #+BEGIN_SRC sh
ovs-vsctl list-ports br0
ovs-vsctl show
   #+END_SRC

   删除网桥br0上附加的eth0网络接口，
   #+BEGIN_SRC sh
ovs-vsctl del-port br0 eth0
   #+END_SRC

   删除br0网桥接口，
   #+BEGIN_SRC sh
ovs-vsctl del-br br0
   #+END_SRC
** ovs-vsctl常用命令及选项
   | 命令及选项                      | 含义                             |
   |---------------------------------+----------------------------------|
   | init                            | 初始化数据库(前提数据包为空)     |
   | show                            | 打印数据库信息摘要               |
   | emer-reset                      | 将ovs配置复位为空状态            |
   | add-br BRIDGE                   | 添加新的网桥BRIDGE               |
   | del-br BRIDGE                   | 删除网桥BRIDGE                   |
   | list-br                         | 打印网桥摘要信息                 |
   | list-ports BRIDGE               | 打印网桥BRIDGE中所有port摘要信息 |
   | add-port BRIDGE PORT            | 向网桥BRIDGE中添加端口PORT       |
   | del-port [BRIDGE] PORT          | 删除BRIDGE上的端口PORT           |
   | get-controller BRIDGE           | 获取网桥BRIDGE的控制器信息       |
   | del-controller BRIDGE           | 删除网桥BRIDGE的控制器信息       |
   | set-controller BRIDGE TARGET... | 向网桥BRIDGE添加控制器target     |
   | -h,--help                       | 打印帮助信息                     |
   | -V,--version                    | 打印ovs的版本信息                |
** ovs-ofctl常用命令及选项
   | 命令及选项               | 含义                                     |
   |--------------------------+------------------------------------------|
   | show SWITCH              | 打印OpenFlow信息                         |
   | dump-ports SWITCH [PORT] | 打印端口统计信息                         |
   | dump-ports-desc SWITCH   | 打印端口描述信息                         |
   | dump-flows SWITCH        | 打印SWITCH中所有的流表项                 |
   | dump-flows SWITCH FLOW   | 打印SWITCH中匹配的流表项                 |
   | add-flow SWITCH FLOW     | 向SWITCH添加流表项                       |
   | add-flows SWITCH FILE    | 从文件中向SWITCH添加流表项               |
   | mod-flows SWITCH FLOW    | 修改SWITCH的流表项                       |
   | del-flows SWITCH [FLOW]  | 删除SWITCH的流表项                       |
   | -O,--protocols           | 设置允许的OpenFlow版本(默认：OpenFlow10) |
   | -h,--help                | 打印帮助信息                             |
   | -V,--version             | 打印版本信息                             |
* Open vSwitch典型配置
** KVM虚拟机通过Open vSwitch接入网络
** Open vSwitch配置bond
** 连接两个网桥
