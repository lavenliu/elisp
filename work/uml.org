#+TITLE: UML
#+AUTHOR: LavenLiu
#+DATE: 2010-08-20
#+EMAIL: ldczz2008@163.com 

#+STARTUP: OVERVIEW
#+TAGS: OFFICE(o) HOME(h) PROJECT(p) CHANGE(c) REPORT(r) MYSELF(m) 
#+TAGS: PROBLEM(P) INTERRUPTTED(i) RESEARCH(R)
#+SEQ_TODO: TODO(t)  STARTED(s) WAITING(W) | DONE(d) CANCELLED(C) DEFERRED(f)
#+COLUMNS: %40ITEM(Details) %TAGS(Context) %7TODO(To Do) %5Effort(Time){:} %6CLOCKSUM{Total}

#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper,11pt]
#+LaTeX_HEADER: \usepackage[top=2.1cm,bottom=2.1cm,left=2.1cm,right=2.1cm]{geometry}
#+LaTeX_HEADER: \setmainfont[Mapping=tex-text]{Times New Roman}
#+LaTeX_HEADER: \setsansfont[Mapping=tex-text]{Tahoma}
#+LaTeX_HEADER: \setmonofont{Courier New}
#+LaTeX_HEADER: \setCJKmainfont[BoldFont={Adobe Heiti Std},ItalicFont={Adobe Kaiti Std}]{Adobe Song Std}
#+LaTeX_HEADER: \setCJKsansfont{Adobe Heiti Std}
#+LaTeX_HEADER: \setCJKmonofont{Adobe Fangsong Std}
#+LaTeX_HEADER: \punctstyle{hangmobanjiao}
#+LaTeX_HEADER: \usepackage{color,graphicx}
#+LaTeX_HEADER: \usepackage[table]{xcolor}
#+LaTeX_HEADER: \usepackage{colortbl}
#+LaTeX_HEADER: \usepackage{listings}
#+LaTeX_HEADER: \usepackage[bf,small,indentafter,pagestyles]{titlesec}

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/style2.css" />

#+OPTIONS: ^:nil
#+OPTIONS: tex:t

* UML基础
** 统一建模语言简介
   回顾20世纪晚期，准确地说是1997年，OMG组织（Object Management Group
   对象管理组织）发布了统一建模语言（Unified Modeling Language，UML）。
   UML的目标之一就是为开发团队提供标准通用的设计语言来开发和构建计算机
   应用。UML提出了一套IT专业人员期待多年的统一的标准建模符号。通过使用
   UML，这些人员能够阅读和交流系统架构和设计规划，就像建筑工人多年来所
   使用的建筑设计图一样。
* 常用的UML图形
** 用例图
   用例图描述了系统提供的一个功能单元。用例图的主要目的是帮助开发团队
   以一种可视化的方式理解系统的功能需求，包括基于基本流程的“角
   色”（actors，也就是与系统交互的其他实体）关系，以及系统内用例之间的
   关系。用例图一般表示出用例的组织关系，要么是整个系统的全部用例，要
   么是完成具有功能（例如，所有安全管理相关的用例）的一组用例。要在用
   例图上显示某个用例，可绘制一个椭圆，然后将用例的名称放在椭圆的中心
   或椭圆下面的中间位置。要在用例图上绘制一个角色（表示一个系统用户），
   可绘制一个人形符号。角色和用例之间的关系是用简单的线段来描述，如下
   图所示，
   #+BEGIN_SRC plantuml
   
   #+END_SRC

   用例图说明：
   
** 类图
   类图表示不同的实体（人、事物和数据）如何彼此相关；换句话说，它显示了系统的
   静态结构。类图可用于表示逻辑类，逻辑类通常就是业务人员所谈及的事物种类，如
   摇滚乐队、CD、广播剧；或者贷款、住房抵押、汽车信贷以及利率。类图还可用于表示
   实现类，实现类就是程序员处理的实体。实现类图或许会与逻辑类图显示一些相同的
   类。然后，实现类图不会使用相同的属性来描述，因为它很可能具有对诸如Vector和
   HashMap这种事物的引用。

   类在类图上使用包含三个部分的矩形来描述，
** 序列图
   序列图显示具体用例（或者是用例的一部分）的详细流程。它几乎是自描述
   的，并且显示了流程中中不同对象之间的调用关系，同时还可以很详细地显
   示对不同对象的不同调用。

   序列图有两个维度：垂直维度以发生的时间顺序显示消息/调用的序列；水平
   维度显示消息被发送到的对象实例。

   序列图的绘制非常简单。横跨图的顶部，每个框（参见图4）表示每个类的实
   例（对象）。在框中，类实例名称和类名称之间用空格/冒号/空格来分隔，
   例如，myReportGenerator : ReportGenerator。如果某个类实例向另一个类
   实例发送一条消息，则绘制一条具有指向接收类实例的开箭头的连线，并把
   消息/方法的名称放在连线上面。对于某些特别重要的消息，您可以绘制一条
   具有指向发起类实例的开箭头的虚线，将返回值标注在虚线上。就我而言，
   我总喜欢绘制出包括返回值的虚线，这些额外的信息可以使得序列图更易于
   阅读。

   阅读序列图也非常简单。从左上角启动序列的"驱动"类实例开始，然后顺着
   每条消息往下阅读。记住：虽然图4所示的例子序列图显示了每条被发送消息
   的返回消息，但这只是可选的。
** 状态图
   状态图表示某个类所处的不同状态和该类的状态转换信息。有人可能会争论
   说每个类都有状态，但不是每个类都应该有一个状态图。只对"感兴趣的"状
   态的类（也就是说，在系统活动期间具有三个或更多潜在状态的类）才进行
   状态图描述。
   
   如图5所示，状态图的符号集包括5个基本元素：初始起点，它使用实心圆来
   绘制；状态之间的转换，它使用具有开箭头的线段来绘制；状态，它使用圆
   角矩形来绘制；判断点，它使用空心圆来绘制；以及一个或者多个终止点，
   它们使用内部包含实心圆的圆来绘制。要绘制状态图，首先绘制起点和一条
   指向该类的初始状态的转换线段。状态本身可以在图上的任意位置绘制，然
   后只需使用状态转换线条将它们连接起来。
** 活动图
   活动图表示在处理某个活动时，两个或者更多类对象之间的过程控制流。活
   动图可用于在业务单元的级别上对更高级别的业务过程进行建模，或者对低
   级别的内部类操作进行建模。根据我的经验，活动图最适合用于对较高级别
   的过程建模，比如公司当前在如何运作业务，或者业务如何运作等。这是因
   为与序列图相比，活动图在表示上"不够技术性的"，但有业务头脑的人们往
   往能够更快速地理解它们。

   活动图的符号集与状态图中使用的符号集类似。像状态图一样，活动图也从
   一个连接到初始活动的实心圆开始。活动是通过一个圆角矩形（活动的名称
   包含在其内）来表示的。活动可以通过转换线段连接到其他活动，或者连接
   到判断点，这些判断点连接到由判断点的条件所保护的不同活动。结束过程
   的活动连接到一个终止点（就像在状态图中一样）。作为一种选择，活动可
   以分组为泳道（swimlane），泳道用于表示实际执行活动的对象，如图6所示。
** 组件图
   组件图提供系统的物理视图。它的用途是显示系统中的软件对其他软件组件
   （例如，库函数）的依赖关系。组件图可以在一个非常高的层次上显示，从
   而仅显示粗粒度的组件，也可以在组件包层次2上显示。

   组件图的建模最适合通过例子来描述。图7显示了4个组件：Reporting Tool、
   Billboard Service、Servlet 2.2 API和JDBC API。从Reporting Tool组件
   指向Billboard Service、Servlet 2.2 API和JDBC API组件的带箭头的线段，
   表示Reporting Tool依赖于那三个组件。
** 部署图
   部署图表示该软件系统如何部署到硬件环境中。它的用途是显示该系统不同
   的组件将在何处物理地运行，以及它们将如何彼此通信。因为部署图是对物
   理运行情况进行建模，系统的生产人员就可以很好地利用这种图。
   
   部署图中的符号包括组件图中所使用的符号元素，另外还增加了几个符号，
   包括节点的概念。一个节点可以代表一台物理机器，或代表一个虚拟机器节
   点（例如，一个大型机节点）。要对节点进行建模，只需绘制一个三维立方
   体，节点的名称位于立方体的顶部。所使用的命名约定与序列图中相同：[实
   例名称] : [实例类型]（例如，"w3reporting.myco.com : Application
   Server"）。
