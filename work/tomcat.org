#+TITLE: Tomcat
#+AUTHOR: LavenLiu
#+DATE: 2010-08-20
#+EMAIL: ldczz2008@163.com 

#+STARTUP: OVERVIEW
#+TAGS: OFFICE(o) HOME(h) PROJECT(p) CHANGE(c) REPORT(r) MYSELF(m) 
#+TAGS: PROBLEM(P) INTERRUPTTED(i) RESEARCH(R)
#+SEQ_TODO: TODO(t)  STARTED(s) WAITING(W) | DONE(d) CANCELLED(C) DEFERRED(f)
#+COLUMNS: %40ITEM(Details) %TAGS(Context) %7TODO(To Do) %5Effort(Time){:} %6CLOCKSUM{Total}

#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper,11pt]
#+LaTeX_HEADER: \usepackage[top=2.1cm,bottom=2.1cm,left=2.1cm,right=2.1cm]{geometry}
#+LaTeX_HEADER: \setmainfont[Mapping=tex-text]{Times New Roman}
#+LaTeX_HEADER: \setsansfont[Mapping=tex-text]{Tahoma}
#+LaTeX_HEADER: \setmonofont{Courier New}
#+LaTeX_HEADER: \setCJKmainfont[BoldFont={Adobe Heiti Std},ItalicFont={Adobe Kaiti Std}]{Adobe Song Std}
#+LaTeX_HEADER: \setCJKsansfont{Adobe Heiti Std}
#+LaTeX_HEADER: \setCJKmonofont{Adobe Fangsong Std}
#+LaTeX_HEADER: \punctstyle{hangmobanjiao}
#+LaTeX_HEADER: \usepackage{color,graphicx}
#+LaTeX_HEADER: \usepackage[table]{xcolor}
#+LaTeX_HEADER: \usepackage{colortbl}
#+LaTeX_HEADER: \usepackage{listings}
#+LaTeX_HEADER: \usepackage[bf,small,indentafter,pagestyles]{titlesec}

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/style2.css" />

#+OPTIONS: ^:nil
#+OPTIONS: tex:t

* Tomcat
* 安装JDK
   #+BEGIN_SRC sh
JAVA_HOME=/usr/local/jdk
M2_HOME=/usr/local/apache-maven
CLASS_PATH=$JAVA_HOME/lib:$JAVA_HOME/jre/lib
PATH=$PATH:$JAVA_HOME/bin:$M2_HOME/bin
export JAVA_HOME
   #+END_SRC
* Tomcat启动脚本
   使用之前需要设置JAVA_HOME，CATALINA_HOME环境变量
   #+BEGIN_SRC bash
cat > /etc/init.d/tomcat << ENDF
#!/bin/bash
# description: Tomcat Start Stop Restart
# processname: tomcat
# chkconfig: 234 20 80
JAVA_HOME=/usr/local/java
export JAVA_HOME
PATH=$JAVA_HOME/bin:$PATH
export PATH
CATALINA_HOME=/home/tomcat/tomcat
case $1 in
start)
   sh $CATALINA_HOME/bin/startup.sh
   ;;
stop)
   sh $CATALINA_HOME/bin/shutdown.sh
   ;;
restart)
   sh $CATALINA_HOME/bin/shutdown.sh
   sh $CATALINA_HOME/bin/startup.sh
   ;;
esac
exit 0
ENDF
   #+END_SRC

   #+BEGIN_SRC bash
chmod 755 /etc/init.d/tomcat
chkconfig --add tomcat
service tomcat restart
   #+END_SRC
* 配置文件
  /usr/local/apache-tomcat/conf/server.xml
* 日志信息
  #+BEGIN_EXAMPLE
  /usr/local/apache-tomcat/logs/catalina.out
  #+END_EXAMPLE
* 管理界面配置
   配置文件/usr/local/apache-tomcat/conf/tomcat-users.xml， *生产环境不建议使用*
   #+BEGIN_EXAMPLE
<role rolename="manager"/>
<role rolename="manager-gui"/>
<role rolename="manager-script"/>
<user username="tomcat" password="xxxyyyzzz" roles="manager-script,manager-gui"/>
   #+END_EXAMPLE
* 端口使用
  | 端口 | 谁占用   | 备注         |
  |------+----------+--------------|
  | 8005 | shutdown | 建议修改端口 |
  | 8009 | ajp端口  | 建议修改端口 |
  | 8080 | http端口 |              |   
* 配置发布目录
   #+BEGIN_SRC sh
   mkdir /webapps/www1
   vim /usr/local/apache-tomcat/conf/server.xml
   找到最后一个</Host>标签，在其上面添加一行，如下：
<Context path="" docBase="/webapps/www1" debug="0" reloadable="false" crossContext="false"> 
</Context>
   #+END_SRC
* Tomcat虚拟主机配置
   在server.xml配置文件中，<Host></Host>字段用来配置虚拟主机的。
   在原来的基础上，复制修改即可。
   #+BEGIN_EXAMPLE
<Host name="www.laven.com"	appBase="laven.com"
	   unpackWARs="true" autoDeploy="true">

   <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
		  prefix="localhost_access_log" suffix=".txt"
		  pattern="%h %l %u %t &quot;%r&quot; %s %b" />

</Host>
   #+END_EXAMPLE
   name是用于定义网站名称，appBase用于定义根目录。
* Tomcat安全规范
** telnet管理端口保护(强制)
   配置内容及说明：
   + 修改默认的8005管理端口为不易猜测的端口(大于1024)
   + 修改SHUTDOWN指令为其他字符串

   标准配置：
   #+BEGIN_EXAMPLE
   <Server port="8527" shutdown="fuckoff">
   #+END_EXAMPLE

   备注：
   #+BEGIN_EXAMPLE
   以上配置只是建议配置，可以按照服务实际情况，进行合理配置，
   但要求端口在8000~8999之间。
   #+END_EXAMPLE
** ajp连接端口保护(推荐)
   配置内容及说明：
   + 修改默认的ajp 8009端口为不易冲突的大于1024端口
   + 通过iptables规则限制ajp端访问的权限仅为线上机器

   标准配置：
   #+BEGIN_EXAMPLE
   <Connector port="8528" protocol="AJP/1.3" />
   #+END_EXAMPLE

   备注：
   #+BEGIN_EXAMPLE
   以上配置仅为建议配置。但端口要求在8000~8999之间；
   保护此端口的目的在于防止线下的测试流量被mod_jk转发
   至线上tomcat服务器。
   #+END_EXAMPLE
** 禁用管理端(强制)
   配置内容及说明：
   + 删除默认的{tomcat安装目录}/conf/tomcat-users.xml，重启tomcat后将会自动生成新的文件
   + 删除{tomcat安装目录}/webapps下默认的所有目录和文件
   + 将tomcat应用根目录配置为tomcat安装目录以外的目录

   标准配置：
   #+BEGIN_EXAMPLE
   <Context path="" docBase="/home/work/local/tomcat_webapps" debug="0" reloadable="false" crossContext="true" />
   #+END_EXAMPLE

   备注：
   #+BEGIN_EXAMPLE
   对于前端web模块，tomcat管理端属于tomcat的高危安全隐患，一旦被攻破，
   黑客通过上传web shell的方式将会直接取得服务器的控制权，后果极其严重。
   #+END_EXAMPLE
** 降权启动(强制)
   配置内容及说明：
   + tomcat启动用户权限必须为非root权限，尽量降低tomcat启动用户的目录访问权限
   + 如果直接对外使用80端口，可通过普通账号启动，配置iptables规则进行转发

   备注：
   #+BEGIN_EXAMPLE
   避免一旦tomcat服务被入侵，黑客直接获取高级用户权限危害整个server的安全。
   #+END_EXAMPLE
** 文件列表访问控制(强制)
   配置内容及说明：
   + conf/web.xml文件中default部分listings的配置必须为false

   标准配置：
   #+BEGIN_EXAMPLE
   <init-param>
		<param-name>listings</param-name>
		<param-value>false</param-value>
   </init-param>
   #+END_EXAMPLE

   备注：
   #+BEGIN_EXAMPLE
   false为不列出目录文件，true为允许列出，默认为false。
   #+END_EXAMPLE
** 版本信息隐藏(强制)
   配置内容及说明：
   + 修改conf/web.xml，重定向403、404以及500等错误到指定错误页面
   + 也可通过修改应用程序目录下的WEB-INF/web.xml下的配置进行错误页面的重定向

   标准配置：
   #+BEGIN_EXAMPLE
   <error-page>
	   <error-code>403</error-code>
	   <location>/forbidden.jsp</location>
   </error-page>
   <error-page>
	   <error-code>404</error-code>
	   <location>/notfonund.jsp</location>
   </error-page>
   <error-page>
	   <error-code>500</error-code>
	   <location>/serverbusy.jsp</location>
   </error-page>
   #+END_EXAMPLE

   备注：
   #+BEGIN_EXAMPLE
   在配置中对一些常见错误进行重定向，避免当出现错误时tomcat默认显示的
   错误页面暴露服务器和版本信息；
   必须确保程序根目录下的错误页面已经存在。
   #+END_EXAMPLE
** Server header重写(推荐)
   配置内容及说明：
   + 在HTTP Connector配置中加入server的配置

   标准配置：
   #+BEGIN_EXAMPLE
   server="coolserver"
   #+END_EXAMPLE
   
   备注：
   #+BEGIN_EXAMPLE
   当tomcat HTTP端口直接提供web服务时，此配置生效，加入此配置，将会
   替换http响应Server header部分的默认配置，默认是"Apache-Coyote/1.1"。
   #+END_EXAMPLE
** 访问限制(可选)
   配置内容及说明：
   + 通过配置，限定访问IP的来源

   标准配置：
   #+BEGIN_EXAMPLE
   <Context path="" docBase="/home/work/tomcat" debug="0" reloadable="false" crossContext="true">
   <Valve className="org.apache.catalina.values.RemoteAddrValue" allow="aaa.bbb.ccc.ddd,eee.fff.ggg.hhh" deny="*.*.*.*"/>
   </Context>
   #+END_EXAMPLE
   
   备注：
   #+BEGIN_EXAMPLE
   通过配置信任的IP白名单，拒绝非白名单IP的访问，此配置主要是针对高保密
   级别的系统，一般产品线不需要。
   #+END_EXAMPLE
** 启停脚本权限回收(推荐)
   配置内容及说明：
   + 去除其他用户对tomcat的bin目录下shutdown.sh、startup.sh、
	 catalina.sh的可执行权限

   标准配置及操作：
   #+BEGIN_EXAMPLE
   # chmod -R 744 /usr/local/apache-tomcat/bin/*
   #+END_EXAMPLE

   备注：
   #+BEGIN_EXAMPLE
   防止其他用户有启停线上tomcat的权限。
   #+END_EXAMPLE
** 访问日志格式规范(推荐)
	配置内容及说明：
	+ 开启tomcat默认访问日志的Referer和User-Agent记录

	标准配置或操作：  
	#+BEGIN_EXAMPLE
<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
           prefix="localhost_access_log" suffix=".txt"
           pattern="%h %l %u %t %r %s %b %{Referer}i %{User-Agent}i %D" resolveHosts="false"/>
	#+END_EXAMPLE

	备注：
	#+BEGIN_EXAMPLE
	开启Referer和User-Agent是为了一旦出现安全问题能够更好的根据日志
	进行问题排查。
	#+END_EXAMPLE

	如果使用Nginx作为前端代理tomcat的话，要让tomcat记录客户端的真实IP，可以使用如下的日志格式配置：
	#+BEGIN_SRC sh
<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
       prefix="myaccess_log." suffix=".txt"
       pattern="Remote User[ %{X-Forwarded-For}i %l %u %t ] Request[ &quot;%r&quot; ]                                        
       Status Code[ %s ] Bytes[ %b ] Referer[ &quot;%{Referer}i&quot; ]                                             
       Agent[ &quot;%{User-agent}i&quot; ] " />
	#+END_SRC

	The following pattern codes are supported:
	#+BEGIN_SRC sh

    %a - Remote IP address
    %A - Local IP address
    %b - Bytes sent, excluding HTTP headers, or '-' if zero
    %B - Bytes sent, excluding HTTP headers
    %h - Remote host name (or IP address if enableLookups for the connector is false)
    %H - Request protocol
    %l - Remote logical username from identd (always returns '-')
    %m - Request method (GET, POST, etc.)
    %p - Local port on which this request was received. See also %{xxx}p below.
    %q - Query string (prepended with a '?' if it exists)
    %r - First line of the request (method and request URI)
    %s - HTTP status code of the response
    %S - User session ID
    %t - Date and time, in Common Log Format
    %u - Remote user that was authenticated (if any), else '-'
    %U - Requested URL path
    %v - Local server name
    %D - Time taken to process the request, in millis
    %T - Time taken to process the request, in seconds
    %F - Time taken to commit the response, in millis
    %I - Current request thread name (can compare later with stacktraces)
	#+END_SRC

	参考网址：http://tomcat.apache.org/tomcat-7.0-doc/config/valve.html#Access_Log_Valve
* Tomcat性能优化
** 一些常用命令
*** jps
*** jstack
** 设置并发连接数
   By default, the maxThreads attribute is set to a humble 200. This
   is fine for a single core machine, but can be multiplied linearly
   given the number of processors on the production machine. On a
   machine with four processors, setting this value to anything
   between 800 and 1000 will not cause a problem. And if the
   configured number ends up far exceeding the number of threads
   required, the thread pool will naturally scale back this number
   when the server load is low.

   Any communication between the client and server that is primarily
   text, be it HTML, XML or simply Unicode can regularly be compressed
   up to 90% using a simple and standard GZIP algorithm. This can have
   a massive impact on reducing network traffic, allowing responses to
   be sent back to the client much faster, while at the same time
   allowing for more network bandwidth to be available for other
   network heavy applications.
   #+BEGIN_SRC sh
<connector>
  port="8080"
  maxThreads="800"
  minSpareThreads="80"
  maxSpareThreads="160"
  compression="on"
  compressableMimeType="text/html,text/xml,text/plain">
</connector>
   #+END_SRC
* JVM故障排除
  1. jps获取Java进程的PID - (jps -lvm)
  2. jstack pid >> pid.txt导出CPU占用高进程的线程栈
  3. top -H -p pid 查看对应进程的哪个线程占用CPU过高
  4. echo "obase=16; pid" |bc 将线程的pid转换为16进制
  5. 在第二步导出的pid.txt中查找转换成为16进制的线程pid。找到对应的线程栈
  6. 分析负载过高的线程都是什么业务操作。优化程序并处理问题
** 故障排除常用工具
	需要修改/usr/local/apache-tomcat/bin/catalina.sh脚本，在脚本的开始
	位置添加如下代码：
	#+BEGIN_EXAMPLE
CATALINA_OPTS="$CATALINA_OPTS
-Dcom.sun.management.jmxremote
-Dcom.sun.management.jmxremote.port=12345
-Dcom.sun.management.jmxremote.authenticate=false
-Dcom.sun.management.jmxremote.ssl=false
-Djava.rmi.server.hostname=192.168.56.104"	
	#+END_EXAMPLE
	1. jconsole
	   #+BEGIN_EXAMPLE
	
	   #+END_EXAMPLE
	2. jvisualvm
* Tomcat监控
  需要安装zabbix-java-gateway包，不一定安装在Zabbix-Server上。
