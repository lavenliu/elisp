* Apache
* 编译安装
  #+BEGIN_EXAMPLE
  ./configure --prefix=/usr/local/apache2.2.31 \
  --enable-deflate \
  --enable-expires \
  --enable-headers \
  --enable-modules=most \
  --enable-so \
  --with-mpm=worker \
  --enable-rewrite

  参数说明：
  1. --enable-deflate 提供对内容的压缩传输编码支持，一般html，js，css等内容的
  站点，使用此参数功能会大大提高传输速度，提升访问者访问体验。在生产环境中，
  这是apache调优的一个重要指标。

  2. --enable-expires 激活允许通过配置文件控制HTTP的“Expires:”和"Cache-Control:"的
  头部，即对网站图片、js、css等内容，提供在客户端浏览器缓存的设置。这是apache
  调优的一个重要选项之一。

  3. --enable-headers 提供允许对HTTP请求头的控制。
  
  4. --with-mpm=worker 选择apache mpm的模式为worker模式，因为worker模式原理是
  更多的使用线程来处理请求，所以可以处理更多的并发请求，而系统资源的开销小于
  基于进程的MPM prefork方式。如果不指定此参数，默认的模式是prefork进程模式。
  这是apache调优的一个重要选项之一。

  5. --enable-rewrite 提供基于URL规则的重写功能。即根据已知的URL地址，转换其他
  想要的URL地址。如伪静态功能就是这个模块实现的。这是apache在生产环境中必用的
  一个重要功能。

  6. --enable-so 激活apache服务的DSO(Dynamic Shared Object，动态共享对象)支持，
  即在以后可以以DSO的方式编译安装共享模块，这个模块本身不能以DSO方式编译。

  make && make install
  ln -s /usr/local/apache2.2.31 /usr/local/apache
  #+END_EXAMPLE
* httpd常用命令
  #+BEGIN_EXAMPLE
  /usr/local/apache/bin/httpd -l 
  /usr/local/apache/bin/httpd -M # 列出有哪些模块
  /usr/local/apache/bin/httpd -V # 显示编译信息
  #+END_EXAMPLE
* 默认站点位置
  1. Apache的默认站点放置在/usr/local/apache/htdocs - (编译安装方式)
  2. 默认站点在/var/www/html - (yum安装方式)
* Apache目录结构
   #+BEGIN_EXAMPLE
# tree -L 1 apache
apache
├── bin     - 
├── build   - 
├── cgi-bin - 
├── conf    - 
├── error   - 
├── htdocs  - 
├── icons   - 
├── include - 
├── lib     - 
├── logs    - 日志默认存放目录，包括错误日志及访问日志
├── man     - 
├── manual  - 
└── modules - 模块目录，
   #+END_EXAMPLE
* Apache主配置说明
   #+BEGIN_EXAMPLE
# egrep -v "^.*#|^$" /usr/local/apache/conf/httpd.conf
ServerRoot "/usr/local/apache2.2.31"
Listen 80
<IfModule !mpm_netware_module>
<IfModule !mpm_winnt_module>
User daemon
Group daemon
</IfModule>
</IfModule>
ServerAdmin you@example.com
ServerName 127.0.0.1:80 # 这一行取消注释，不然每次启动apache时，会有警告提示，而非错误提示。
DocumentRoot "/usr/local/apache2.2.31/htdocs"
<Directory />
    Options FollowSymLinks
    AllowOverride None
    Order deny,allow
    Deny from all
</Directory>
<Directory "/usr/local/apache2.2.31/htdocs">
    Options Indexes FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>
<IfModule dir_module>
    DirectoryIndex index.html
</IfModule>
<FilesMatch "^\.ht">
    Order allow,deny
    Deny from all
    Satisfy All
</FilesMatch>
ErrorLog "logs/error_log"
LogLevel warn
<IfModule log_config_module>
    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%h %l %u %t \"%r\" %>s %b" common
    <IfModule logio_module>
      LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
    </IfModule>
    CustomLog "logs/access_log" common
</IfModule>
<IfModule alias_module>
    ScriptAlias /cgi-bin/ "/usr/local/apache2.2.31/cgi-bin/"
</IfModule>
<IfModule cgid_module>
</IfModule>
<Directory "/usr/local/apache2.2.31/cgi-bin">
    AllowOverride None
    Options None
    Order allow,deny
    Allow from all
</Directory>
DefaultType text/plain
<IfModule mime_module>
    TypesConfig conf/mime.types
    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz
</IfModule>
Include conf/extra/httpd-vhosts.conf
<IfModule ssl_module>
SSLRandomSeed startup builtin
SSLRandomSeed connect builtin
</IfModule>
   #+END_EXAMPLE

   一些配置的说明：
   #+BEGIN_EXAMPLE
<Directory "/usr/local/apache2.2.31/htdocs"> # 设置/usr/local/apache2.2.31/htdocs目录块权限
    Options Indexes FollowSymLinks # FollowSymLinks表示禁止使用符号链接，Indexes表示允许目录浏览
                                   # 这很危险，应改为"Options -Indexes FollowSymLinks"或"Options FollowSymLinks"
                                   # 以取消目录列表(浏览)功能。
    AllowOverride None # 表示禁止用户对目录配置文件(.htaccess进行修改)重载。
    Order allow,deny # 表示allow优先处理，没有明确说明允许的话都将拒绝访问，即
                     # 拒绝未被明确允许的，即默认全部禁止访问，类似于看电影，
                     # 没有票不能进，必须要买票(即有明确进入许可)。
    Allow from all # 允许所有的访问，因为是提供给所有人WEB访问服务，所以此处权限
                   # 要放开
</Directory>   
   #+END_EXAMPLE
* Apachhe扩展配置文件
   apache的扩展配置文件是通过httpd.conf主配置文件中嵌入Include指令实现
   的。默认情况下是注释掉的。
   #+BEGIN_EXAMPLE
[root@www conf]# tree extra/
extra/
├── httpd-autoindex.conf
├── httpd-dav.conf
├── httpd-default.conf # apache的相关服务参数，如，超时时间，保持连接时间等
├── httpd-info.conf
├── httpd-languages.conf # 语言支持配置
├── httpd-manual.conf
├── httpd-mpm.conf # 服务器池管理，也就是优化apache的一个配置文件，如
                      # 选择apache的模式及配置连接数等，常用的模式有worker和prefork模式，
                      # 默认情况是prefork。
├── httpd-multilang-errordoc.conf
├── httpd-ssl.conf # 提供SSL功能
├── httpd-userdir.conf
└── httpd-vhosts.conf # 虚拟主机的配置文件
   #+END_EXAMPLE
* 虚拟主机的配置
   #+BEGIN_EXAMPLE
   # egrep -v "^.*#|^$" /usr/local/apache/conf/extra/httpd-vhost.conf
NameVirtualHost *:80
<VirtualHost *:80>
    ServerAdmin webmaster@dummy-host.example.com
    DocumentRoot "/usr/local/apache2.2.31/docs/dummy-host.example.com"
    ServerName dummy-host.example.com
    ServerAlias www.dummy-host.example.com
    ErrorLog "logs/dummy-host.example.com-error_log"
    CustomLog "logs/dummy-host.example.com-access_log" common
</VirtualHost>
<VirtualHost *:80>
    ServerAdmin webmaster@dummy-host2.example.com
    DocumentRoot "/usr/local/apache2.2.31/docs/dummy-host2.example.com"
    ServerName dummy-host2.example.com
    ErrorLog "logs/dummy-host2.example.com-error_log"
    CustomLog "logs/dummy-host2.example.com-access_log" common
</VirtualHost>

   ==================参数说明==================
   ServerName: 这里配置提供服务的域名，如www.lavenliu.com，如果是生产环境需要
   把www.lavenliu.com解析到服务器上配置的外网VIP或IP上，如果是测试，也可以在
   本机上做hosts解析。

   ServerAlias: 这里配置虚拟主机的别名，也就是可以配置多个域名访问同一个站点，
   如此处配lavenliu.com，则输入lavenliu.com可以得到和www.lavenliu.com同样的
   结果，此功能需要apache的mod_alias模块支持。

   ErrorLog: 这里可以配置apache的错误日志文件路径，错误日志是调试apache的一个
   非常重要的日志。有什么错误信息一般这里都会展示出来。

   CustomLog: 访问日志配置，在生产环境用，一般用combined格式替代common格式，
   以获取更多的日志格式输出。

   可以在一台机器上配置过个虚拟主机，如www,cms,blog

   提示：在虚拟主机配置文件http-vhosts.conf中，有些参数选项是和httpd.conf主
   配置文件是相同的。这里是局部(httpd-vhosts.conf)优先原则，如果局部没有
   配置，则使用全局配置。
   #+END_EXAMPLE
** 基于域名的虚拟主机配置
	修改apache的主配置文件httpd.conf，取消"#Include conf/extra/httpd-vhosts.conf"
	该行的注释。
	#+BEGIN_EXAMPLE
	# grep "httpd-vhosts.conf" /usr/local/apache/conf/httpd.conf
	# sed -i 's@#Include conf/extra/httpd-vhosts.conf@Include conf/extra/httpd-vhosts.conf@' /usr/local/apache/conf/httpd.conf
	# cd /usr/local/apache/conf/extra
	# cp httpd-vhosts.conf httpd-vhosts.conf.lavenliu.20130306
	# egrep -v "^.*#|^$" /usr/local/apache/conf/extra/httpd-vhosts.conf
NameVirtualHost *:80
<VirtualHost *:80>
    ServerAdmin ldczz2008@163.com
    DocumentRoot "/var/www/blog"
    ServerName blog.lavenliu.com
    ServerAlias lavenliu.com
    ErrorLog "logs/blog-error_log"
    CustomLog "logs/blog-access_log" common
</VirtualHost>
	#+END_EXAMPLE

	配置完毕，检查已修改的apache配置文件语法的正确性，
	#+BEGIN_EXAMPLE
	# mkdir -p /var/www/blog
	# /usr/local/apache/bin/apachectl -t
	Syntax OK
	# /usr/local/apache/bin/apachectl graceful
	# 这里是graceful参数，而不是restart参数，graceful表示优雅的重启，这个
	# 参数可以在重启时，使正在浏览的用户无感知，即重启时不会强行中断用户
	# 的访问请求，而是处理完毕请求后再重新启动。这个graceful参数在生产环境
	# 中是非常的重要，在使用时使用graceful代替restart参数。
	#
	# ps -ef |grep httpd
	# netstat -antup |grep 80
	#+END_EXAMPLE
** 基于IP的虚拟主机配置
	基于IP的虚拟主机在生产环境中的应用比较少见。

	如果要配置基于IP的虚拟主机，就需要每个虚拟主机有不同的IP，此处我们
	以增加别名的方式来临时增加一个IP(在负载均衡配置里此IP也被称为VIP)
	#+BEGIN_EXAMPLE
	# 增加一个别名IP
	# ifconfig eth1:0 192.168.20.138 netmask 255.255.255.0 up
	#+END_EXAMPLE

	增加IP后，此时服务器的IP变为：(192.168.20.128,192.168.20.138)
	#+BEGIN_EXAMPLE
	# ifconfig
eth1      Link encap:Ethernet  HWaddr 00:0C:29:B0:0F:94  
          inet addr:192.168.20.128  Bcast:192.168.20.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:feb0:f94/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:442 errors:0 dropped:0 overruns:0 frame:0
          TX packets:408 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:45769 (44.6 KiB)  TX bytes:49940 (48.7 KiB)

eth1:0    Link encap:Ethernet  HWaddr 00:0C:29:B0:0F:94  
          inet addr:192.168.20.138  Bcast:192.168.20.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
	#+END_EXAMPLE

	*修改主配置文件*
	#+BEGIN_EXAMPLE
	# 在httpd.conf主配置文件中，增加如下配置，
<Directory "/var/www/bbs">
    Options FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>

<Directory "/var/www/ftp">
    Options FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>
	#+END_EXAMPLE

	*修改httpd-vhosts.conf配置文件*
	#+BEGIN_EXAMPLE
<VirtualHost 192.168.20.128:80>
    ServerAdmin ldczz2008@163.com
    DocumentRoot "/var/www/ftp"
    ServerName 192.168.20.128
    ServerAlias lavenliu.com
    ErrorLog "logs/ftp-error_log"
    # CustomLog "logs/ftp-access_log" common                                                                                         
    CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/ftp_access_%Y%m%d.log" combined
</VirtualHost>

<VirtualHost 192.168.20.138:80>
    ServerAdmin ldczz2008@163.com
    DocumentRoot "/var/www/bbs"
    ServerName 192.168.20.138
    ServerAlias lavenliu.com
    ErrorLog "logs/bbs-error_log"
    # CustomLog "logs/bbs-access_log" common                                                                                         
    CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/bbs_access_%Y%m%d.log" combined
</VirtualHost>	
	#+END_EXAMPLE
	
	*检查配置语法并启动*
	#+BEGIN_EXAMPLE
# /usr/local/apache/bin/apachectl -t
Syntax OK
# /usr/local/apache/bin/apachectl graceful
	#+END_EXAMPLE
** 基于端口的虚拟主机配置
   基于端口的虚拟主机在生产环境中的应用也不多见，仅偶尔会用到，一般是
   为公司内部人员提供访问的，如页面的后台、CMS发布、phpmyadmin等。

   有两种方式：基于"IP:PORT"的虚拟主机与基于"DOMAIN:PORT"的虚拟主机。

*** 基于IP:PORT形式
	 1. 增加监听的端口
		#+BEGIN_EXAMPLE
		# 如果要配置基于端口的虚拟主机，就需要每个虚拟主机配置有不同的端口。
		# 首先，编辑httpd.conf主配置文件，然后找到默认的"Listen 80"的配置行，
		# 在其下面一行加入如下内容：
		Listen 8091
		Listen 8092

		提示：保留80端口可用，同时又增加了8080、8090两个端口。不同的端口可以共存。
		#+END_EXAMPLE
	 2. 配置httpd-vhosts.conf
		#+BEGIN_EXAMPLE
		# 编辑httpd-vhosts.conf，清除之前的所有配置，加入如下虚拟主机的配置
		# cp httpd-vhosts.conf httpd-vhosts.conf.bak
		# grep -Ev "#" httpd-vhosts.conf
 <VirtualHost 192.168.20.128:8091>
     ServerAdmin ldczz2008@163.com
     DocumentRoot "/var/www/ftp"
     ServerName 192.168.20.128
     ServerAlias lavenliu.com
     ErrorLog "logs/ftp-error_log"
     CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/ftp_access_%Y%m%d.log" combined
 </VirtualHost>

 <VirtualHost 192.168.20.128:8092>
     ServerAdmin ldczz2008@163.com
     DocumentRoot "/var/www/bbs"
     ServerName 192.168.20.138
     ServerAlias lavenliu.com
     ErrorLog "logs/bbs-error_log"
     CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/bbs_access_%Y%m%d.log" combined
 </VirtualHost>

		# 增加index.html文件
		# echo "192.168.20.128:8091" > /var/www/ftp/index.html
		# echo "192.168.20.128:8092" > /var/www/bbs/index.html

		#+END_EXAMPLE
	 3. 检查配置语法并访问
		#+BEGIN_EXAMPLE
		# /usr/local/apache/bin/apachectl -t
		# /usr/local/apache/bin/apachectl graceful
		# netstat -antup |grep 80
		# curl -I http://192.168.20.128:8091
 HTTP/1.1 200 OK
 Date: Sun, 31 Jan 2016 09:36:01 GMT
 Server: Apache/2.2.31 (Unix) DAV/2
 Last-Modified: Sun, 31 Jan 2016 09:31:49 GMT
 ETag: "a155a-14-52a9df0194592"
 Accept-Ranges: bytes
 Content-Length: 20
 Content-Type: text/html
		# curl -I http://192.168.20.128:8092
 HTTP/1.1 200 OK
 Date: Sun, 31 Jan 2016 09:36:45 GMT
 Server: Apache/2.2.31 (Unix) DAV/2
 Last-Modified: Sun, 31 Jan 2016 09:32:03 GMT
 ETag: "9f2d7-14-52a9df0e1b60e"
 Accept-Ranges: bytes
 Content-Length: 20
 Content-Type: text/html		
		#+END_EXAMPLE
*** 基于DOMAIN:PORT形式
	 1. 配置文件
		#+BEGIN_EXAMPLE
<VirtualHost *:8091>
    ServerAdmin ldczz2008@163.com
    DocumentRoot "/var/www/ftp"
    ServerName ftp.lavenliu.com
    ServerAlias ftp1.lavenliu.com
    ErrorLog "logs/ftp-error_log"
    # CustomLog "logs/ftp-access_log" common                                                                                         
    CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/ftp_access_%Y%m%d.log" combined
</VirtualHost>

<VirtualHost *:8092>
    ServerAdmin ldczz2008@163.com
    DocumentRoot "/var/www/bbs"
    ServerName bbs.lavenliu.com
    ServerAlias bbs1.lavenliu.com
    ErrorLog "logs/bbs-error_log"
    # CustomLog "logs/bbs-access_log" common                                                                                         
    CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/bbs_access_%Y%m%d.log" combined
</VirtualHost>		
		#+END_EXAMPLE
	 2. 检查配置语法
	 3. 启动并访问
* Apache日志轮询
   安装日志轮询工具cronolog
   #+BEGIN_EXAMPLE
   # yum install -y cronolog
   # which cronolog
   # cat /usr/local/apache/conf/extra/httpd-vhosts.conf
<VirtualHost *:80>
    ServerAdmin ldczz2008@163.com
    DocumentRoot "/var/www/blog"
    ServerName blog.lavenliu.com
    ServerAlias lavenliu.com
    ErrorLog "logs/blog-error_log"
    # CustomLog "logs/blog-access_log" common
    CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/blog_access_%Y%m%d.log" combined
</VirtualHost>
   #+END_EXAMPLE

   注意的问题：
   #+BEGIN_EXAMPLE
   1. cronolog轮询日志的正确写法，被轮询的日志路径要写全路径
   2. 按天轮询的用法，(按天记录日志，日志不会自动覆盖)
      CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/blog_access_%Y%m%d.log" combined
   3. 按小时轮询(如果要及时详细的分析apache日志，此配置比较适用)
      CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/blog_access_%Y%m%d%H.log" combined
   4. 按周轮询(如果只需保留少量日志，供SA等查日志排故障使用，不做为特殊行为分析等，选周比较合适)
      CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/blog_access_%w.log" combined
      CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/%w/blog_access.log" combined
      这样，每经过一周，日志就会自动轮询覆盖，不需要担心磁盘空间不足而经常手动清理日志了。
   #+END_EXAMPLE
* Apache常用模块
** mod_deflate模块
   [root@www conf]# ../bin/apachectl -l |grep mod_deflate
 mod_deflate.c
** mod_expires模块
* Apache优化
** Apache日志轮询
   1. 下载并安装cronolog
	  #+BEGIN_EXAMPLE
	  # cd /usr/local/src
	  # wget http://cronolog.org/download/cronolog-1.6.2.tar.gz
	  # tar -xf cronolog-1.6.2.tar.gz
	  # cd cronolog-1.6.2
	  # ./configure
	  # make && make install
	  #+END_EXAMPLE
   2. 配置日志轮询
	  #+BEGIN_EXAMPLE
	  # emacs /usr/local/apache/conf/extra/httpd-vhosts.conf
	  # 添加以下内容：
	  CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/blog_access_%Y%m%d.log" combined	   
	  #+END_EXAMPLE
** 错误页面优雅显示
   可以将404等的错误信息页面重定向到网站首页或其他页面，提升用户体验。
   
   #+BEGIN_EXAMPLE
   # emacs /usr/local/apache/conf/httpd.conf
   # 修改一下内容：
   ErrorDocument 404 http://www.lavenliu.com
   # 提示：支持url和文件
   #+END_EXAMPLE
** mod_deflate文件压缩功能
	Gzip的思想就是把文件现在服务器端进行压缩，然后再传输。这样可以显著
	减少文件传输的大小。传输完毕后浏览器会重新对压缩过的内容进行解压缩，
	没有特殊情况，所有的文本内容都应该被gzip压缩:html(php)、js、css、
	xml、txt...，因为首页上还有很多广告投放的js，这些广告代码拥有者的
	网站的js没有经过gzip压缩，是由于需要每次加载进而统计来访信息。

	检查是否安装mod_deflate模块：
	#+BEGIN_EXAMPLE
	# /usr/local/apache/bin/apachectl -l |grep mod_deflate
	mod_deflate.c
	#+END_EXAMPLE

	如果是DSO方式编译的，则查看方法：
	#+BEGIN_EXAMPLE
	# ls /usr/local/apache/modules/ |grep mod_deflate
	# grep mod_deflate /usr/local/apache/conf/httpd.conf
	#+END_EXAMPLE

	mod_deflate DSO安装方法:
	#+BEGIN_EXAMPLE
	# 切换到apache源码目录mod_deflate程序下
	# cd /usr/local/src/httpd-2.2.31/modules/filters
	# 以dso的方式编译到apache中
	# /usr/local/apache/bin/apxs -c -i -a mod_deflate.c
	# 这时，会在httpd.conf的配置文件里自动加载了该模块
	# grep mod_deflate /usr/local/apache/conf/httpd.conf
	LoadModule deflate_module     modules/mod_deflate.so
	# 检查apache的配置语法，这时会发现有错误，
	# /usr/local/apache/bin/apachectl -t
	httpd: Syntax error on line 56 of /usr/local/apache2.2.31/conf/httpd.conf: module deflate_module is built-in and can't be loaded
	# 由于编译时已经启用了deflate模块，再次启用DSO方式的模块，导致有冲突，
	# 只需要在配置文件里注释掉相应的"LoadModule"行即可
	#+END_EXAMPLE

	apxs参数说明：
	#+BEGIN_EXAMPLE
	-c 此选项表示需要执行编译操作。它首先会编译C源程序(.c)files为对应的目标代码
	   文件(.o)，然后连接这些目标代码和files中其余的目标代码文件(.o和.a)，
	   以生成动态共享对象dsofile。如果没有指定-o选项，则此输出文件名由files
	   中的第一个文件名推测得到，也就是默认为mod_name.so。
	-i 此选项表示需要执行安装操作，以安装一个或多个动态共享对象到服务器的
	   modules目录中。
	-a 此选项自动加载一个LoadModule行到httpd.conf文件中，以激活此模块，或者，
	   如果此行已存在，则启用之。
	#+END_EXAMPLE

	*一个测试插件YSlow，火狐浏览器或谷歌浏览器，用于测试是否启用mod_deflate模块*

	添加以下内容到虚拟主机：
	#+BEGIN_EXAMPLE
<ifmodule mod_deflate.c>
    DeflateCompressionLevel 9
    SetOutputFilter DEFLATE
    DeflateFilterNote Input instream
    DeflateFilterNote Output outstream
    DeflateFilterNote Ratio ratio
    #LogFormat '"%r" %{outstream}n/%{instream}n (%{ratio}n%%)' deflate
    #CustomLog logs/deflate_log.log deflate
</ifmodule>
	#+END_EXAMPLE

	具体配置如：
	#+BEGIN_EXAMPLE
# ip:port based virtualhost                                                                                                          
<VirtualHost 192.168.20.128:8091>
    ServerAdmin ldczz2008@163.com
    DocumentRoot "/var/www/ftp"
    ServerName ftp.lavenliu.com
    ServerAlias lavenliu.com
    ErrorLog "logs/ftp-error_log"
    # CustomLog "logs/ftp-access_log" common                                                                                         
    CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/ftp_access_%Y%m%d.log" combined
    <ifmodule mod_deflate.c>
        DeflateCompressionLevel 9
        SetOutputFilter DEFLATE
        DeflateFilterNote Input instream
        DeflateFilterNote Output outstream
        DeflateFilterNote Ratio ratio
        #LogFormat '"%r" %{outstream}n/%{instream}n (%{ratio}n%%)' deflate                                                           
        #CustomLog logs/deflate_log.log deflate                                                                                      
    </ifmodule>
</VirtualHost>	
	#+END_EXAMPLE

	仅压缩限制特定的MIME类型文件：
	#+BEGIN_EXAMPLE
AddOutputFilterByType DEFLATE text/html text/plain text/xml
或
AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css application/javascript
	#+END_EXAMPLE
** mode_expires缓存功能
	越来越多的图片、脚本、css、flash被嵌入到页面中，当我们访问这些资源
	的时候势必会做许多次的http请求。其实我们可以通过设置Expires header
	来缓存这些文件。Expire其实就是通过header报文来指定特定类型的文件在
	浏览器中的缓存时间。大多数的图片，flash在发布后都是不需要经常修改
	的，做了缓存后，这样浏览器以后就不需要再从服务器下载这些文件而是直
	接从缓存中读取，这样再次访问相同的页面，速度回大大提高。

	配置方法：
	1. 针对虚拟主机或者主配置文件
	   #+BEGIN_EXAMPLE
ExpiresActive On
ExpiresDefault "access plus 5 minutes"
ExpiresByType text/html "access plus 0 minutes"
ExpiresByType text/css "access plus 1 month"
ExpiresByType image/gif "access plus 1 year"
ExpiresByType image/jpeg "access plus 1 year"
ExpiresByType image/png "access plus 1 year"
ExpiresByType audio/mpeg "access plus 1 year"
ExpiresByType audio/x-ms-wma "access plus 1 year"
ExpiresByType video/mpeg "access plus 1 year"
ExpiresByType video/x-msvideo "access plus 1 year"
ExpiresByType application/x-javascript "access plus 1 year"
ExpiresByType application/x-shockwave-flash "access plus 1 year"
	   #+END_EXAMPLE

	   具体配置：
	   #+BEGIN_EXAMPLE
# ip:port based virtualhost
<VirtualHost 192.168.20.128:8091>
    ServerAdmin ldczz2008@163.com
    DocumentRoot "/var/www/ftp"
    ServerName ftp.lavenliu.com
    ServerAlias lavenliu.com
    ErrorLog "logs/ftp-error_log"
    # CustomLog "logs/ftp-access_log" common
    CustomLog "|/usr/sbin/cronolog /usr/local/apache2.2.31/logs/ftp_access_%Y%m%d.log" combined
    <ifmodule mod_deflate.c>
        DeflateCompressionLevel 9
        SetOutputFilter DEFLATE
        DeflateFilterNote Input instream
        DeflateFilterNote Output outstream
        DeflateFilterNote Ratio ratio
        #LogFormat '"%r" %{outstream}n/%{instream}n (%{ratio}n%%)' deflate
        #CustomLog logs/deflate_log.log deflate
    </ifmodule>

    ExpiresActive On
    ExpiresDefault "access plus 5 minutes"
    ExpiresByType text/html "access plus 0 minutes"
    ExpiresByType text/css "access plus 1 month"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType audio/mpeg "access plus 1 year"
    ExpiresByType audio/x-ms-wma "access plus 1 year"
    ExpiresByType video/mpeg "access plus 1 year"
    ExpiresByType video/x-msvideo "access plus 1 year"
    ExpiresByType application/x-javascript "access plus 1 year"
    ExpiresByType application/x-shockwave-flash "access plus 1 year"
</VirtualHost>	   
	   #+END_EXAMPLE

	   重启apache服务，一个测试：
	   #+BEGIN_EXAMPLE
	   # 未设置缓存前的测试
	   # curl -I http://192.168.20.128:8091/2048.png
HTTP/1.1 200 OK
Date: Mon, 01 Feb 2016 09:04:15 GMT
Server: Apache/2.2.31 (Unix) DAV/2
Last-Modified: Wed, 27 Jan 2016 03:12:16 GMT
ETag: "86188-94b6-52a482b4c8400"
Accept-Ranges: bytes
Content-Length: 38070
Vary: Accept-Encoding
Content-Type: image/png

	   # 设置了缓存的测试
	   # curl -I http://192.168.20.128:8091/2048.png
HTTP/1.1 200 OK
Date: Mon, 01 Feb 2016 09:18:35 GMT
Server: Apache/2.2.31 (Unix) DAV/2
Last-Modified: Wed, 27 Jan 2016 03:12:16 GMT
ETag: "86188-94b6-52a482b4c8400"
Accept-Ranges: bytes
Content-Length: 38070
Cache-Control: max-age=31536000
Expires: Tue, 31 Jan 2017 09:18:35 GMT # 多了一个过期时间
Vary: Accept-Encoding
Content-Type: image/png
	   #+END_EXAMPLE
	2. 针对目录
	   #+BEGIN_EXAMPLE
<Directory ~ "/var/www/html/.*/(all|tuijian)">
    ExpiresActive On
    ExpiresDefault "access plus 5 minutes"
    ExpiresByType text/html "access plus 0 minutes"
    ExpiresByType text/css "access plus 1 month"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType audio/mpeg "access plus 1 year"
    ExpiresByType audio/x-ms-wma "access plus 1 year"
    ExpiresByType video/mpeg "access plus 1 year"
    ExpiresByType video/x-msvideo "access plus 1 year"
    ExpiresByType application/x-javascript "access plus 1 year"
    ExpiresByType application/x-shockwave-flash "access plus 1 year"
</Directory>
	   #+END_EXAMPLE
*** 生产环境mod_expires优点
	1. 提升用户体验
	   #+BEGIN_EXAMPLE
	   由于用户读本地缓存，所以访问页面就快了，用户体验提升了，网站口碑就好了。
	   #+END_EXAMPLE
	2. 节约网站带宽成本
	   #+BEGIN_EXAMPLE
	   由于用户读本地缓存，和服务器的交互就少了，也节约网站的带宽流量成本。
	   即满足用户，公司也少花钱了。
	   #+END_EXAMPLE
	3. 节约网站服务器及维护成本
	   #+BEGIN_EXAMPLE
	   由于用户读本地缓存，和服务器的交互就少了，服务器的压力小了，服务器数量及
	   维护人员等成本都降低了。
	   #+END_EXAMPLE
*** expires失效条件
	1. 用户主动清空缓存
	2. 内容缓存期已到
	3. 其他情况
	   #+BEGIN_EXAMPLE
	   如果网站更新功能或更新文件后，用户再次访问时的内容还是旧的(已缓存，不会再次下载了)
	   怎么解决这个问题，见下。
	   #+END_EXAMPLE
*** 控制expires方法
	解答上面的文件更新问题，
	1. 首先，对于大多数公司业务来说，图片等资源一般是很少去修改。因此
	   公司可以把这些资源的过期时间设置为10年；
	2. 对于js，css等偶尔会变化的资源，一般expires设置时间会比较短。如1-30天；
	3. 在更新文件上采取策略，如，更新后以新的文件名发布，这样对于用户
	   又是新的资源。
*** 特殊缓存情况
	1. 特殊缓存，google首页expires一日(经常会变更图片)
	2. 网站的js统计代码不会设置缓存
** 更改apache的默认用户
	创建apache用户，用于子进程和线程
	#+BEGIN_EXAMPLE
	# useradd -M -s /sbin/nologin apache
	#+END_EXAMPLE
	
	编辑apache配置文件：
	#+BEGIN_EXAMPLE
	# vi /usr/local/apache/conf/httpd.conf
User apache
Group apache
	# 提示，尽量用不被人猜出来的用户
	#+END_EXAMPLE
** 使用worker模式，提升并发数(可以达到2000-5000)
   编译安装时，使用worker模式：
   #+BEGIN_EXAMPLE
   # ./configure --prefix=/usr/local/apache2.2.31 \
   --enable-deflate \
   --enable-expires \
   --enable-headers \
   --enable-modules=most \
   --enable-so \
   --with-mpm=worker \
   --enable-rewrite	
   # make 
   # make install
   #+END_EXAMPLE
** 屏蔽apache版本等敏感信息
	1. 修改httpd.conf文件，打开httpd-default.conf模块
	2. 修改httpd-default.conf文件，"ServerSignature Off"以及"ServerTokens Prod"
	3. 修改完毕，重启apache

	如要完全去掉版本信息，需要重新编译，彻底去掉banner，修改httpd.h文件：
	#+BEGIN_EXAMPLE
include/httpd.h
Define 	
	#+END_EXAMPLE
** apache目录文件权限设置(root，目录755，文件644)
   apache的网站目录属组是root，权限是755；文件属组是root，权限是644。
   #+BEGIN_EXAMPLE
   在网站架构中，应把资源文件，包括用户上传的图片，附件等和程序分离，最好把上传
   的程序也分离，这样就可以从容授权了。
   #+END_EXAMPLE
** 开启httpd-mpm.conf以增加连接数
	1. Apache服务为worker模块的配置
	   #+BEGIN_EXAMPLE
<IfModule mpm_worker_module>
    StartServers        5
    MaxClients          2000
    ServerLimit         25
    MinSpareThreads     50
    MaxSpareThreads     200
    ThreadLimit         200
    ThreadsPerChild     100
    MaxRequestsPerChild 0
</IfModule>	   
	   #+END_EXAMPLE
	   注：
	   #+BEGIN_EXAMPLE
	   MaxClients <= ServerLimit * ThreadsPerChild
	   #+END_EXAMPLE
	2. Apache服务为prefork模式，生产环境配置文件httpd-default.conf的配置
	   #+BEGIN_EXAMPLE
StartServers         10
MinSpareServers      10
MaxSpareServers      15
ServerLimit          2000
MaxClients           2000
MaxRequestsPerChild  10000
	   #+END_EXAMPLE
** apache防盗链功能
	#+BEGIN_EXAMPLE
<IfModule rewrite_module>
    RewriteEngine On
    RewriteCond %{HTTP_REFERER} !^http://lavenliu.com/.*$ [NC]
    RewriteCond %{HTTP_REFERER} !^http://lavenliu.com$ [NC]
    RewriteCond %{HTTP_REFERER} !^http://www.lavenliu.com/.*$ [NC]
    RewriteCond %{HTTP_REFERER} !^http://www.lavenliu.com$ [NC]
    RewriteRule .*\.(gif|jpg|swf)$ http://www.51cto.com [R,NC]
</IfModule>	
	#+END_EXAMPLE
** 禁止目录Index
	#+BEGIN_EXAMPLE
<Directory /var/www/html>
    Options FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>
	#+END_EXAMPLE
	或者
	#+BEGIN_EXAMPLE
<Directory /var/www/html>
    Options -Indexes FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>
	#+END_EXAMPLE
** 禁止用户重载
	#+BEGIN_EXAMPLE
<Directory "/usr/local/apache/htdocs">
    Options None
    AllowOverride None  # 禁止用户覆盖(重载)
    Order allow,deny
    Allow from all
</Directory>
	# 加快服务器速度，因为它不再为每个请求寻找每个目录访问控制文件(.htaccess)
	#+END_EXAMPLE
** 关闭CGI
	删除以下配置内容：
	#+BEGIN_EXAMPLE
ScriptAlias /cgi-bin/ "/usr/local/apache/cgi-bin/"
<Directory "/usr/local/apache/cgi-bin">
    AllowOverride None
    Options None
    Order allow,deny
    Allow from all
</Directory>
	#+END_EXAMPLE
** 避免使用.htaccess文件
   首先是性能问题。如果AllowOverride启用了.htaccess文件，则Apache需要
   在每个目录中查找.htaccess文件，因此，无论是否真正用到，启
   用.htaccess都会导致性能的下降。另外，对每一个请求，都需要读取一
   次.htaccess文件。

   其次是安全问题。这样会允许用户自己修改服务器的配置，这可能导致某些
   意想不到的修改，所以请认真考虑是否应当给予用户这样的特权。默认在
   Unix平台下能够使用.htaccess来对目录权限进行规则定义，但这是不安全
   的，建议关闭，默认的选项：
   #+BEGIN_EXAMPLE
   AccessFileName .htaccess
   #+END_EXAMPLE
   建议改成：
   #+BEGIN_EXAMPLE
   #AccessFileName .htaccess
   #+END_EXAMPLE
   全部目录权限定义使用httpd.conf中的定义，不使用.htaccess。
** apache的安全模块
   1. mod_evasive20
   2. mod_limitipconn
   3. mod_security2
   4. makejail
   5. mod-security
** 正确途径取得源代码，勤打apache补丁
** apache日志授予root 700权限
   #+BEGIN_EXAMPLE
   chown -R root.root logs
   chmod -R 700 logs
   #+END_EXAMPLE
** 系统内核参数优化
** 禁止PHP解析指定站点的目录
** 尽可能减少HTTP请求数
** 使用CDN做网站加速
* LAMP
* 遇到的问题
** 403错误 - Forbidden
	解决办法：
	#+BEGIN_EXAMPLE
	# 修改主配置文件，增加如下配置：
<Directory "/var/www/blog">
    Options FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>
	#+END_EXAMPLE
